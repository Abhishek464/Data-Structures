class Solution {
    int[] parent;
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length; 
        parent=new int[n+1];
        // Initializing Parent array      
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
            } 
        // Process each edge
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            if (find(u) == find(v)) {
                return edge; // Redundant edge found
            }
            union(u, v);
        }
        
        return new int[0]; // No redundant edge found
    }
    
        // Find function with path compression
        int find(int x) {

            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        // Union function
        void union(int x, int y) {
            parent[find(x)] = find(y);
        }
}