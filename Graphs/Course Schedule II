class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        
        for (int[] prerequisite : prerequisites) {
            graph[prerequisite[1]].add(prerequisite[0]);
        }
        
        int[] visited = new int[numCourses];
        List<Integer> order = new ArrayList<>();
        
        for (int i = 0; i < numCourses; i++) {
            if (hasCycle(graph, visited, order, i)) {
                return new int[0]; // Cycle detected
            }
        }
        
        Collections.reverse(order);
        return order.stream().mapToInt(i -> i).toArray();
    }
    
    private boolean hasCycle(List<Integer>[] graph, int[] visited, List<Integer> order, int course) {
        if (visited[course] == 1) 
        return true; // Cycle detected
        if (visited[course] == 2) 
        return false; // Already visited
        
        visited[course] = 1; // Mark as visiting
        for (int neighbor : graph[course]) {
            if (hasCycle(graph, visited, order, neighbor)) {
                return true;
            }
        }
        
        visited[course] = 2; // Mark as visited
        order.add(course);
        return false;
    }
}