class Solution {
    boolean isLeaf(Node node) {
        if (node == null)
            return false;
        if (node.left == null && node.right == null)
            return true;
        return false;
    }
    
    boolean isSumTree(Node root) {
        // Your code here
        int ls, rs;

        // If node is null or it's a leaf node then return true
        if (root == null || isLeaf(root))
            return true;

        // If the left subtree and right subtree are sum trees,
        // then we can find subtree sum in O(1).
        if (isSumTree(root.left) && isSumTree(root.right)) {

            // Get the sum of nodes in left subtree
            if (root.left == null)
                ls = 0;
            else if (isLeaf(root.left))
                ls = root.left.data;
            else
                ls = 2 * (root.left.data);

            // Get the sum of nodes in right subtree
            if (root.right == null)
                rs = 0;
            else if (isLeaf(root.right))
                rs = root.right.data;
            else
                rs = 2 * (root.right.data);

            // If root's data is equal to sum of nodes in left
            // and right subtrees then return true else return false
            return root.data == ls + rs;
        }

        // if either of left or right subtree is not 
      	// sum tree, then return false.
        return false;
    }
}
