public class Solution {
    public int maxPoints(int[][] points) {
        if (points == null || points.length == 0) 
        return 0;
        int maxPoints = 1;

        for (int i = 0; i < points.length; i++) {
            Map<String, Integer> slopeMap = new HashMap<>();
            int duplicate = 0;
            int vertical = 0;

            for (int j = i + 1; j < points.length; j++) {
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];

                if (dx == 0 && dy == 0) {
                    duplicate++;
                } else if (dx == 0) {
                    vertical++;
                } else {
                    int gcd = gcd(dx, dy);
                    dx /= gcd;
                    dy /= gcd;
                    String slope = dy + "/" + dx;
                    slopeMap.put(slope, slopeMap.getOrDefault(slope, 0) + 1);
                }
            }
            maxPoints = Math.max(maxPoints, vertical + duplicate + 1);
            for (int count : slopeMap.values()) {
                maxPoints = Math.max(maxPoints, count + duplicate + 1);
            }
        }
        return maxPoints;
    }

    private int gcd(int a, int b) {
        if (b == 0) 
        return a;
        return gcd(b, a % b);
    }
}